import logging
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.i18n import gettext as _
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.filters import IsAdmin
from app.bot.utils.navigation import NavAdminTools
from app.db.models import Transaction, User, Server, Promocode, Referral

logger = logging.getLogger(__name__)
router = Router(name=__name__)


async def get_statistics(session: AsyncSession) -> dict:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    total_users_query = await session.execute(select(func.count()).select_from(User))
    total_users = total_users_query.scalar() or 0

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    day_ago = datetime.now() - timedelta(days=1)
    new_users_query = await session.execute(
        select(func.count()).select_from(User).where(User.created_at >= day_ago)
    )
    new_users_24h = new_users_query.scalar() or 0

    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = datetime.now() - timedelta(days=7)
    new_users_week_query = await session.execute(
        select(func.count()).select_from(User).where(User.created_at >= week_ago)
    )
    new_users_7d = new_users_week_query.scalar() or 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    servers_query = await session.execute(select(func.count()).select_from(Server))
    total_servers = servers_query.scalar() or 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions_query = await session.execute(select(func.count()).select_from(Transaction))
    total_transactions = transactions_query.scalar() or 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promocodes_query = await session.execute(
        select(func.count()).select_from(Promocode).where(Promocode.is_activated == True)
    )
    used_promocodes = promocodes_query.scalar() or 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referrals_query = await session.execute(select(func.count()).select_from(Referral))
    total_referrals = referrals_query.scalar() or 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    trial_users_query = await session.execute(
        select(func.count()).select_from(User).where(User.is_trial_used == True)
    )
    trial_users = trial_users_query.scalar() or 0

    return {
        "total_users": total_users,
        "new_users_24h": new_users_24h,
        "new_users_7d": new_users_7d,
        "total_servers": total_servers,
        "total_transactions": total_transactions,
        "used_promocodes": used_promocodes,
        "total_referrals": total_referrals,
        "trial_users": trial_users
    }


@router.callback_query(F.data == NavAdminTools.STATISTICS, IsAdmin())
async def callback_statistics(callback: CallbackQuery, user: User, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

    Args:
        callback: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info(f"Admin {user.tg_id} opened statistics.")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_statistics(session)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = _(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {stats['new_users_24h']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['new_users_7d']}\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {stats['trial_users']}\n\n"
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_servers']}\n\n"
        f"üí∞ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['total_transactions']}\n\n"
        f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used_promocodes']}\n\n"
        f"üëã <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_referrals']}"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=_("‚Ü©Ô∏è –ù–∞–∑–∞–¥"),
                    callback_data=NavAdminTools.MAIN
                )
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await callback.message.edit_text(
        text=message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()